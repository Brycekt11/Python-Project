import streamlit as st
from robodk import robolink
import os
import numpy as np
import cv2 as cv
import time

# Initialize RoboDK connection
RDK = robolink.Robolink()
robot = RDK.Item('', itemtype=2)  # Default open cell
if not robot.Valid():
    st.error("No valid robot found.")
    st.stop() 
#connects the the robot 

# Streamlit setup
st.title("Cartesian Position and Live Feed")
cartesian_placeholder = st.empty() 
#sets main title of app and creates placeholder for the TCP values

# Camera setup
CAM_NAME = 'My Camera'
cam_item = RDK.Item(CAM_NAME, robolink.ITEM_TYPE_CAMERA)
if not cam_item.Valid():
    st.error(f"Camera '{CAM_NAME}' not found in RoboDK.")
    st.stop()
cam_item.setParam('Open', 1)  # Open camera
image_placeholder = st.empty() 
#Defines the camera and sets up the streamlit module for it

# Session state setup
if "program_initialized" not in st.session_state:
    st.session_state.program_initialized = False
if "simulation_running" not in st.session_state:
    st.session_state.simulation_running = False
if "program" not in st.session_state:
    st.session_state.program = None
if "uploaded_gcode_path" not in st.session_state:
    st.session_state.uploaded_gcode_path = "" 
#defines the logic states so that actions arnt repeated in the code 

# Upload file logic
st.header("Upload GCODE File for Printing")
uploaded_file = st.file_uploader("Choose a GCODE file", type=["gcode", "nc"]) 
# creates file upload module in streamlit 

# Process uploaded file and initialize the printing program once
if uploaded_file:
    save_path = os.path.abspath("uploaded.nc")
    with open(save_path, "wb") as temp_file:
        temp_file.write(uploaded_file.getvalue()) 
    st.success(f"GCODE file saved at: {save_path}") 
    #creates temp file to store teh uploaded files contents to be ran by the robot

    # Ensure initialization only happens once
    if not st.session_state.program_initialized:
        try:
            st.info("Setting up the Printing Program...")
            printing_project = RDK.AddMillingProject("Printing Program")
            if printing_project:
                st.success("Printing project created successfully!")
                program, status = printing_project.setMillingParameters(ncfile=save_path, part=0, params="")
                if status:
                    st.success("Printing parameters set successfully!")
                    # Store initialized program state
                    st.session_state.program_initialized = True
                    st.session_state.program = program
                    st.session_state.uploaded_gcode_path = save_path
                else:
                    st.error("Failed to set printing parameters.")
            else:
                st.error("Failed to create Printing Project.")
        except Exception as e:
            st.error(f"Error during setup: {e}") 
    # Checks if the session has not been started then will create the printing program and load the NC file, If both successful the initialized session state and program state are set to true and defined


# Start simulation logic
if st.session_state.program_initialized and st.session_state.program:
    if st.button("Start Printing Simulation") and not st.session_state.simulation_running:
        try:
            st.info("Setting simulation mode...")
            RDK.setRunMode(robolink.PROGRAM_RUN_ON_SIMULATOR)  # Enable simulation mode
            st.session_state.program.RunProgram()
            st.session_state.simulation_running = True
            st.success("Simulation started successfully!")
        except Exception as e:
            st.error(f"Error starting simulation: {e}") 
#checks if a program has been successfully loaded and that the program exists, if so start the program in simulation mode

# Stop simulation logic
if st.session_state.simulation_running:
    if st.button("Stop Simulation"):
        try:
            st.session_state.program.Stop()
            st.session_state.simulation_running = False
            st.success("Simulation stopped successfully.")
        except Exception as e:
            st.error(f"Error stopping simulation: {e}") 
#Shows the stop button if the simulation is running and pressing it will stop the simulation

# Live feed logic
while True:
    try:
        bytes_img = RDK.Cam2D_Snapshot('', cam_item)
        if isinstance(bytes_img, bytes) and bytes_img != b'':
            nparr = np.frombuffer(bytes_img, np.uint8)
            img_socket = cv.imdecode(nparr, cv.IMREAD_COLOR)
        else:
            st.error("Failed to capture the camera feed.")
            break 
        #uses numpy to convert byte stream from camera capture into an array for image processing 

        img_rgb = cv.cvtColor(img_socket, cv.COLOR_BGR2RGB)
        image_placeholder.image(img_rgb, channels="RGB", use_container_width=True)

        pose = robot.Pose()
        x, y, z = pose[0, 3], pose[1, 3], pose[2, 3]
        x_color = 'rgb(255, 100, 100)'
        y_color = 'rgb(100, 255, 100)'
        z_color = 'rgb(100, 100, 255)'

        cartesian_placeholder.markdown(
            f"**Current Cartesian Position:** "
            f"<span style='color:{x_color}'>X={x:.2f} mm</span>, "
            f"<span style='color:{y_color}'>Y={y:.2f} mm</span>, "
            f"<span style='color:{z_color}'>Z={z:.2f} mm</span>",
            unsafe_allow_html=True 
            #displays values and adds color
        )
        time.sleep(0.02)  
        #refresh rate
    except Exception as e:
        st.error(f"Error capturing feed or data: {e}")
        break
